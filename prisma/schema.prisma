// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("STUDENT") // "STUDENT" or "ADMIN"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriptions   Subscription[]
  videoAccesses   VideoAccess[]
  watchHistories  WatchHistory[]

  @@map("users")
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  price       Float
  duration    Int      // in days
  accessLevel String   @default("BASIC") // "BASIC" or "PREMIUM"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  status    String   @default("ACTIVE") // "ACTIVE", "EXPIRED", "CANCELLED"
  startDate DateTime @default(now())
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model VideoCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  videos Video[]

  @@map("video_categories")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  thumbnail   String?
  duration    Int?     // in seconds
  categoryId  String
  accessLevel String   @default("BASIC") // "BASIC" or "PREMIUM"
  status      String   @default("ACTIVE") // "ACTIVE", "INACTIVE", "PROCESSING"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category     VideoCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  videoAccesses VideoAccess[]
  watchHistories WatchHistory[]

  @@map("videos")
}

model VideoAccess {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  accessType String  @default("DIRECT_GRANT") // "SUBSCRIPTION" or "DIRECT_GRANT"
  grantedAt DateTime @default(now())
  expiresAt DateTime?

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("video_accesses")
}

model WatchHistory {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  progress  Float    @default(0) // percentage watched (0-100)
  watchedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("watch_histories")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}
